const { validationResult } = require('express-validator');

//интересный способ из массива создать объект
let validateDecorator = (action = {}) => (
   Object.keys(action).reduce((result, actionName) => {
     
      return {
         ...result,
         [actionName] (req, res, next) {
           
            let errors = validationResult(req);
            if (!errors.isEmpty()) {
              return res.status(422).json({ errors: errors.array() });
            }
            action[actionName](req, res, next)//запускается и передаётся
         },
      }
   }, {} )
)

module.exports = validateDecorator;
/*
Что тут вообще происходит и зачем это надо? 
Что бы в каждой функции не писать руками один и тот же код, существует понятие 
функции декоратор. Которую затачивают на то что бы она делала изменения в передаваемых ей
функциях. Как бы присваивала им новый функционал + возвращала старый функционал
 
Здесь ситуация такая. Собираются ключи в массив, массив перебирается в новый объект
используя старые ключи и присваиваются новые функции.

Запускается декоратор передаётся объект с функциями, собираются ключи этого объекта
присваиваются новые функции ключам, помещается новый функционал и помещается вызов старой функции.

Теперь к старой функции обращение будет через новую функцию с передачей аргументов.
Вот и получается прослойка нового функционала.

Схематично это так:

function createUser(req, res, next){
   новый функционал
   createUser(req, res, next)
}
*/
